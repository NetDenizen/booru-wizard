#!/bin/sh -efu

# Automated tooling to booru-wizard packages for distribution.
# It should be used from the root of the repository.

# Static constants
EX_USAGE=64 #command line usage error

# Functions

# Echo the argument string to Stderr
# Arg 1: Message
errcho()
{
	>&2 echo $@;
}

# Print the usage information to Stderr
print_usage()
{
	errcho "Usage: $0 <dist name> <temp path> <package path> <version number> <architecture> <platform>"
	errcho
	errcho "<dist name>      : The name of the executable file generated by pyInstaller. The script will search in the dist directory for this."
	errcho
	errcho "<temp path>      : Where temporary files used to create the package are stored. These are deleted afterwards. This can also match <package path> without issue."
	errcho
	errcho "<package path>   : Where the final package is stored. This can also match <temp path> without issue."
	errcho
	errcho "<version number> : The version number of booru-wizard."
	errcho
	errcho "<architecture>   : The CPU architecture of the system booru-wizard was built for. E.g. x86, x86_64, etc."
	errcho
	errcho "<platform>       : In this case, only 'linux' and 'windows' (non case-sensitive) are supported. This primarily affects the output format of the archive ('.tar.gz' vs '.zip')."
}

# Verify command line arg count.
# Arg 1...: All command line args
verify_arg_count()
{
	if [ $# -ne 6 ]
	then
		print_usage
		exit $EX_USAGE
	fi
}

# Generate lower-case platform name
# Arg 1: Platform name
generate_platform_name()
{
	local L_PLATFORM="$1"
	echo "$(echo "$L_PLATFORM" | tr '[:upper:]' '[:lower:]')"
}

# Verify command line arg count.
# Arg 1: Platform name
# Arg 2: Lower-case platform name
verify_platform_name()
{
	local L_PLATFORM="$1"
	local L_PLATFORM_LOWER="$2"

	if [ ! "$L_PLATFORM_LOWER" = "linux" ] && [ ! "$L_PLATFORM_LOWER" = "windows" ]
	then
		print_usage
		errcho
		errcho "<platform> must be 'linux' or 'windows' (non case-sensitive). Found '$L_PLATFORM' instead."
		errcho
		exit $EX_USAGE
	fi
}

# Create directories needed to generate the package.
# Arg 1: Temporary path
# Arg 2: Package version directory
# Arg 3: Package path
create_directories()
{
	local L_TEMP_PATH="$1"
	local L_VERSION_DIR="$2"
	local L_PACKAGE_PATH="$3"

	mkdir -v -p "$L_TEMP_PATH"
	mkdir -v -p "$L_VERSION_DIR"
	mkdir -v -p "$L_PACKAGE_PATH"
}

# Copy files to their temporary destinations.
# Arg 1: Distribution executable name
# Arg 2: Package version directory
# Arg 3: Platform name
copy_files()
{
	local L_DIST_NAME="$1"
	local L_VERSION_DIR="$2"
	local L_PLATFORM_NAME="$3"

	cp -v ./CHANGELOG.md "$L_VERSION_DIR"
	cp -v ./LICENSE "$L_VERSION_DIR"
	cp -v ./README.md "$L_VERSION_DIR"
	cp -v "./dist/$L_DIST_NAME" "$L_VERSION_DIR/booru-wizard"
	cp -v ./default_config.cfg "$L_VERSION_DIR"
	cp -v ./imgbrd-grabber_log_template.json "$L_VERSION_DIR"
	cp -v ./output_schema.json "$L_VERSION_DIR"

	if [ "$L_PLATFORM" = "linux" ]
	then
		cp -v ./run.sh "$L_VERSION_DIR"
	elif [ "$L_PLATFORM" = "windows" ]
	then
		cp -v ./run.bat "$L_VERSION_DIR"
	fi
}

# Create the finished package
# Arg 1: Platform name
# Arg 2: Package version directory
# Arg 3: Package version name
# Arg 4: Temporary path
# Arg 5: Package path
create_package()
{
	local L_PLATFORM="$1"
	local L_VERSION_DIR="$2"
	local L_VERSION_NAME="$3"
	local L_TEMP_PATH="$4"
	local L_PACKAGE_PATH="$5"

	if [ "$L_PLATFORM" = "linux" ]
	then
		local L_TAR_NAME="$L_VERSION_DIR.tar"
		tar -v -c --remove-files -f "$L_TAR_NAME" --owner=0 --group=0 -C "$L_TEMP_PATH" "$L_VERSION_NAME"
		gzip -v -f -9 "$L_TAR_NAME"
		mv -v "$L_TAR_NAME.gz" "$L_PACKAGE_PATH" || true
	elif [ "$L_PLATFORM" = "windows" ]
	then
		cd "$L_TEMP_PATH"
		zip -v -9 -X -r -m "$L_PACKAGE_PATH/$L_VERSION_NAME.zip" "$L_VERSION_NAME"
	fi
}

# Main procedure
# Arg 1...: All command line arguments
main()
{
	verify_arg_count "$@"

	# Load command line args
	local L_DIST_NAME="$1"
	local L_TEMP_PATH="$2"
	local L_PACKAGE_PATH="$3"
	local L_VERSION_NUMBER="$4"
	local L_ARCHITECTURE="$5"
	local L_PLATFORM="$6"

	# Create variables
	local L_PLATFORM_LOWER="$(generate_platform_name "$L_PLATFORM")"
	verify_platform_name "$L_PLATFORM" "$L_PLATFORM_LOWER"

	local L_VERSION_NAME="booru-wizard-$L_VERSION_NUMBER-$L_ARCHITECTURE-$L_PLATFORM"
	local L_VERSION_DIR="$L_TEMP_PATH/$L_VERSION_NAME"

	# Run procedures
	create_directories "$L_TEMP_PATH" "$L_VERSION_DIR" "$L_PACKAGE_PATH"
	copy_files "$L_DIST_NAME" "$L_VERSION_DIR" "$L_PLATFORM"
	create_package "$L_PLATFORM" "$L_VERSION_DIR" "$L_VERSION_NAME" "$L_TEMP_PATH" "$L_PACKAGE_PATH"
}

# Run main procedure
main "$@"
